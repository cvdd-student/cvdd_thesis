def mix(data):
    """Mixes the input data according to the instructions."""
    mixed_data = data[:]  # Create a copy to avoid modifying the original
    n = len(mixed_data)
    for i in range(len(mixed_data)):
        value = mixed_data[i]
        move = value
        pos = (i + move) % n
        if pos < 0:
            pos = n + pos  # Correct for negative values (wrapping)
        
        mixed_data.pop(i)
        mixed_data.insert(pos, value)  # Important: Use insert to preserve order.
    return mixed_data

def find_grove_coordinates(data, target):
  """Finds coordinates based on a target index"""

  mixed_data = data[:]
  
  index_0 = mixed_data.index(target)
  
  # Important to handle the index wraparound in the list 
  # using the modulo operator when dealing with circular indexes
  pos1000 = (index_0 + 1000) % len(mixed_data)
  pos2000 = (index_0 + 2000) % len(mixed_data)
  pos3000 = (index_0 + 3000) % len(mixed_data)

  return mixed_data[pos1000], mixed_data[pos2000], mixed_data[pos3000]


if __name__ == "__main__":
    with open("input.txt", "r") as f:  # Replace "input.txt" with your file
        input_data = [int(line.strip()) for line in f]

    mixed_data = mix(input_data)

    # Note how we only need to execute this for a single run to get the final state
    zero_index = mixed_data.index(0)  # We don't need the mix function, use data
    coord1, coord2, coord3 = find_grove_coordinates(mixed_data, 0)

    result = coord1 + coord2 + coord3
    print(result)