def solve():
    jet_pattern = input()
    
    rocks = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 1],
            [2, 1]
        ],
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 0],
            [1, 1],
            [1, 2],
            [2, 1]
        ],
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
            [1, 0],
            [1, 1],
            [1, 2],
            [1, 3]
        ],
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
            [1, 0],
            [1, 1],
            [1, 2],
            [1, 3]
        ],
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1]
        ]
    ]
    
    jet_idx = 0
    tower_height = 0
    
    rock_count = 0
    rock_heights = []

    for _ in range(2022):
        rock_idx = rock_count % 5
        rock = rocks[rock_idx]
        
        x_pos = 2
        y_pos = 0 + max(rock_heights) + 3 if rock_heights else 3

        moved = False
        while True:
            
            # Move horizontally
            if jet_pattern[jet_idx % len(jet_pattern)] == '>':
                new_x = x_pos + 1
                if new_x < 7 and all( (new_x + dx, y_pos + dy) not in [(rx, ry) for r in rock_heights for rx,ry in r] for dx, dy in [(i, j) for i in range(len(rock)) for j in range(len(rock[i]))] ):
                    x_pos = new_x
                    moved = True
            elif jet_pattern[jet_idx % len(jet_pattern)] == '<':
                new_x = x_pos - 1
                if new_x >= 0 and all( (new_x + dx, y_pos + dy) not in [(rx, ry) for r in rock_heights for rx,ry in r] for dx, dy in [(i, j) for i in range(len(rock)) for j in range(len(rock[i]))] ):
                    x_pos = new_x
                    moved = True
                    
            jet_idx +=1


            # Move vertically
            new_y = y_pos + 1
            if all( (x_pos + dx, new_y + dy) not in [(rx, ry) for r in rock_heights for rx,ry in r] for dx, dy in [(i, j) for i in range(len(rock)) for j in range(len(rock[i]))] ) :
                y_pos = new_y
                moved = True
            else:
                break

        rock_heights.append([(x_pos + dx, y_pos + dy) for dx, dy in [(i, j) for i in range(len(rock)) for j in range(len(rock[i]))]])

        
        rock_count += 1


    print(max(rock_heights)[0][1])

solve()