import collections

def solve():
    grid = []
    start = None
    end = None
    for y, line in enumerate(open("input.txt").readlines()):
        row = list(line.strip())
        grid.append(row)
        if 'S' in row:
            start = (row.index('S'), y)
        if 'E' in row:
            end = (row.index('E'), y)

    def get_neighbors(r, c):
        neighbors = []
        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            nr, nc = r + dr, c + dc
            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]):
                neighbors.append((nr, nc))
        return neighbors

    def bfs(start_node, end_node):
        queue = collections.deque([(start_node, 0)])
        visited = {start_node}
        while queue:
            (r, c), dist = queue.popleft()
            if (r, c) == end_node:
                return dist
            for nr, nc in get_neighbors(r, c):
                if (nr, nc) not in visited and grid[nr][nc] != '#':
                    visited.add((nr, nc))
                    queue.append(((nr, nc), dist + 1))
        return float('inf')

    cheats = {}
    for r in range(len(grid)):
        for c in range(len(grid[0])):
            if grid[r][c] == '.':
                for nr, nc in get_neighbors(r, c):
                    if grid[nr][nc] == '#':
                        for nnr, nnc in get_neighbors(nr,nc):
                            if grid[nnr][nnc] == '.':
                                cheat_time = bfs((r,c), (nnr,nnc))
                                if cheat_time != float('inf'):
                                    original_time = bfs(start,end)
                                    cheats.setdefault((r, c, nnr, nnc), []).append(original_time - (cheat_time + 2))

    count_100plus = 0
    for cheat_time_savings in cheats.values():
        for saving in cheat_time_savings:
            if saving >= 100:
                count_100plus += 1
    print(count_100plus)

solve()