def solve():
    patterns = input().split(", ")
    patterns = {p.strip(): 0 for p in patterns}

    input()  # consume the blank line

    designs = []
    while True:
        try:
            design = input()
            designs.append(design)
        except EOFError:
            break

    def is_possible(design, patterns_dict):
        design_len = len(design)
        if design_len == 0: return True
        
        dp = [False] * (design_len + 1)
        dp[0] = True

        for i in range(1, design_len + 1):
            for j in range(1, i + 1):
                sub_design = design[i - j:i]
                if sub_design in patterns_dict:
                    if dp[i - j]:
                        dp[i] = True
                        break
        return dp[design_len]
    

    count = 0
    for design in designs:
        if is_possible(design, patterns):
            count += 1
    print(count)


solve()