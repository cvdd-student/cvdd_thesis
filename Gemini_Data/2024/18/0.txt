import heapq

def solve():
    grid_size = 70
    byte_positions = []
    
    # Example input (replace with your actual input)
    example_input = [
        (5, 4), (4, 2), (4, 5), (3, 0), (2, 1), (6, 3), (2, 4), (1, 5), (0, 6), (3, 3),
        (2, 6), (5, 1), (1, 2), (5, 5), (2, 5), (6, 5), (1, 4), (0, 4), (6, 4), (1, 1),
        (6, 1), (1, 0), (0, 5), (1, 6), (2, 0)
    ]
    
    # Simulate the first 1024 bytes falling
    for i in range(1024):
        if i < len(example_input):
            x, y = example_input[i]
            byte_positions.append((x, y))
        else:
            # Add more bytes if needed (replace with your actual byte generation logic)
            pass

    grid = [['.' for _ in range(grid_size)] for _ in range(grid_size)]
    for x, y in byte_positions:
        grid[y][x] = '#'

    def dijkstra(grid):
        start = (0, 0)
        end = (grid_size - 1, grid_size - 1)
        distances = {(0, 0): 0}
        queue = [(0, 0)]
        
        while queue:
            current_distance, (x, y) = heapq.heappop(queue)
            
            if (x, y) == end:
                return current_distance
            
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < grid_size and 0 <= ny < grid_size and grid[ny][nx] == '.':
                    new_distance = current_distance + 1
                    if (nx, ny) not in distances or new_distance < distances[(nx, ny)]:
                        distances[(nx, ny)] = new_distance
                        heapq.heappush(queue, (new_distance, (nx, ny)))
        return float('inf')  # No path found

    min_steps = dijkstra(grid)
    print(min_steps)

solve()