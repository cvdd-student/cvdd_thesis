def solve():
    grid = []
    with open("input.txt") as f:
        for line in f:
            grid.append(line.strip())

    height = len(grid)
    width = len(grid[0])

    energized = [[False] * width for _ in range(height)]

    row = 0
    col = 0
    direction = 1  # 1: right, 2: down, 3: left, 4: up

    def reflect(c):
        nonlocal direction
        if c == '/':
            if direction == 1:
                direction = 4
            elif direction == 3:
                direction = 2
            elif direction == 2:
                direction = 3
            elif direction == 4:
                direction = 1

        elif c == '\\':
            if direction == 1:
                direction = 2
            elif direction == 3:
                direction = 4
            elif direction == 2:
                direction = 1
            elif direction == 4:
                direction = 3

    def update_position():
        nonlocal row, col, direction
        if direction == 1:
            col += 1
        elif direction == 2:
            row += 1
        elif direction == 3:
            col -= 1
        elif direction == 4:
            row -= 1

    while 0 <= row < height and 0 <= col < width:
        c = grid[row][col]
        energized[row][col] = True
        if c == '.' or c == '-' or c == '|':
            update_position()
        elif c == '/' or c == '\\':
            reflect(c)
            update_position()
        elif c == '|':
            new_directions = {4: [row - 1, col, 4], 2: [row + 1, col, 2]}
            for dr, new_row, new_direction in new_directions.values():
                new_row, new_col = new_row, col
                
                if 0 <= new_row < height and 0 <= new_col < width : 
                  energized[new_row][new_col] = True


                
                new_col = new_row

                direction_new_row, direction_new_col =  new_direction , new_col

            

        
                

           


        elif c == '-':

            new_directions = {1: [row, col + 1, 1], 3: [row, col - 1, 3]}
            for dr, new_row, new_direction in new_directions.values():
                new_row, new_col = row, new_row
                if 0 <= new_row < height and 0 <= new_col < width: 
                    energized[new_row][new_col] = True
          
        
    
  

    return sum(sum(1 for energized in row if energized) for row in energized)
        
    

print(solve())