def solve():
    grid = []
    with open("input.txt", "r") as f:
        for line in f:
            grid.append(list(line.strip()))

    start_row, start_col = -1, -1
    for r in range(len(grid)):
        for c in range(len(grid[0])):
            if grid[r][c] == '#':
                continue
            if grid[r][c] == 'S':
                start_row = r
                start_col = c
                break
        if start_row != -1:
            break

    def get_neighbors(r, c):
        neighbors = []
        dr = [0, 0, 1, -1]
        dc = [1, -1, 0, 0]
        chars = ['>', '<', 'v', '^']
        for i in range(4):
            nr, nc = r + dr[i], c + dc[i]
            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]):
                if grid[nr][nc] == '#':
                    continue
                neighbors.append((nr, nc))
        return neighbors
        

    def dfs(r, c, path_length, visited):
        if grid[r][c] == 'O':
            return path_length

        if (r, c) in visited:
          return -1


        max_path_length = path_length
        visited.add((r,c))
        neighbors = get_neighbors(r, c)
        for nr, nc in neighbors:
            char = grid[nr][nc]
            
            if char in ['>', '<', '^', 'v']:
                dr = {'^': -1, 'v': 1, '<': 0, '>': 0}
                dc = {'^': 0, 'v': 0, '<': -1, '>': 1}

                next_r, next_c = nr + dr[char], nc + dc[char]
                
                if 0 <= next_r < len(grid) and 0 <= next_c < len(grid[0]) and grid[next_r][next_c] != '#' and (next_r,next_c) not in visited:
                    new_path_length = dfs(next_r, next_c, path_length + 1, visited.copy())
                    if new_path_length != -1:
                       max_path_length = max(max_path_length, new_path_length)
            elif grid[nr][nc] == '.':
                new_path_length = dfs(nr, nc, path_length + 1, visited.copy())
                if new_path_length != -1:
                    max_path_length = max(max_path_length, new_path_length)
            

        return max_path_length
    
    result = dfs(start_row, start_col, 0, set())
    print(result)


solve()