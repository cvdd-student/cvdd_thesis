def solve():
    grid = []
    start_row, start_col = -1, -1
    with open("input.txt", "r") as f:
        for i, line in enumerate(f):
            row = list(line.strip())
            grid.append(row)
            if "S" in row:
                start_row, start_col = i, row.index("S")

    rows = len(grid)
    cols = len(grid[0])

    def is_valid(row, col):
        return 0 <= row < rows and 0 <= col < cols and grid[row][col] != "#"

    def bfs(steps):
        reachable = set()
        queue = [(start_row, start_col, 0)]
        reachable.add((start_row, start_col))

        while queue:
            row, col, current_steps = queue.pop(0)
            if current_steps == steps:
                continue

            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                new_row, new_col = row + dr, col + dc
                if is_valid(new_row, new_col) and (new_row, new_col) not in reachable:
                    queue.append((new_row, new_col, current_steps + 1))
                    reachable.add((new_row, new_col))

        return reachable

    reachable_plots = bfs(64)
    count = 0
    for row, col in reachable_plots:
        if grid[row][col] == '.':
            count += 1
    return count

print(solve())