import collections

def solve():
    grid = []
    start_row, start_col = -1, -1
    for i, line in enumerate(open("input.txt", "r").readlines()):
        row = list(line.strip())
        grid.append(row)
        if 'S' in row:
            start_row, start_col = i, row.index('S')
    
    q = collections.deque([(start_row, start_col, 0)])
    visited = set([(start_row, start_col)])
    reachable_plots = set([(start_row, start_col)])
    
    while q:
        row, col, steps = q.popleft()
        
        if steps == 64:
            break
            
        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and grid[new_row][new_col] != '#' and (new_row, new_col) not in visited:
                
                reachable_plots.add((new_row,new_col))
                q.append((new_row, new_col, steps+1))
                visited.add((new_row, new_col))
    
    count = 0
    for row, col in reachable_plots:
      if grid[row][col] =='.':
         count+=1
    return count

print(solve())