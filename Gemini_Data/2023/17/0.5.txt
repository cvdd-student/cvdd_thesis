def solve():
    grid = []
    with open("input.txt", "r") as f:
        for line in f:
            grid.append(list(map(int, list(line.strip()))))

    rows = len(grid)
    cols = len(grid[0])

    def get_heat_loss(row, col):
        return grid[row][col]

    def is_valid(row, col):
        return 0 <= row < rows and 0 <= col < cols

    def find_shortest_path():
        queue = [(0, 0, 0, 0, 0, 0)]  # (row, col, heat_loss, direction, steps_in_dir, path)
        visited = set()
        visited.add((0, 0))

        while queue:
            row, col, heat_loss, direction, steps_in_dir, path = queue.pop(0)

            if row == rows - 1 and col == cols - 1:
                return heat_loss

            for new_direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                new_row, new_col = row + new_direction[0], col + new_direction[1]
                
                if is_valid(new_row, new_col) and (new_row, new_col) not in visited:
                    
                    new_heat_loss = heat_loss + get_heat_loss(new_row, new_col)
                    
                    if new_direction == (0, 1) and direction != (0, 1) or new_direction == (1, 0) and direction != (1, 0) or new_direction == (0, -1) and direction != (0, -1) or new_direction == (-1, 0) and direction != (-1, 0):
                        new_steps_in_dir = 1
                        new_direction = new_direction
                    else:
                        new_steps_in_dir = steps_in_dir + 1
                        new_direction = new_direction

                    if new_steps_in_dir <= 3:
                        queue.append((new_row, new_col, new_heat_loss, new_direction, new_steps_in_dir, path + [(new_row, new_col)]))
                        visited.add((new_row, new_col))
        return float('inf')  # No path found

    result = find_shortest_path()
    return result

print(solve())