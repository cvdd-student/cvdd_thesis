def solve():
    grid = []
    with open("input.txt", "r") as f:
        for line in f:
            grid.append(line.strip())

    def get_neighbors(r, c):
        neighbors = []
        if r > 0 and grid[r - 1][c] != ".":
            neighbors.append((r - 1, c))
        if r < len(grid) - 1 and grid[r + 1][c] != ".":
            neighbors.append((r + 1, c))
        if c > 0 and grid[r][c - 1] != ".":
            neighbors.append((r, c - 1))
        if c < len(grid[0]) - 1 and grid[r][c + 1] != ".":
            neighbors.append((r, c + 1))
        return neighbors

    def find_loop(start_r, start_c):
        visited = set()
        queue = [(start_r, start_c, 0)]
        loop_nodes = []
        
        while queue:
            r, c, steps = queue.pop(0)
            if (r, c) in visited:
                continue
            visited.add((r, c))
            loop_nodes.append((r, c))
            
            neighbors = get_neighbors(r, c)
            for nr, nc in neighbors:
                queue.append((nr, nc, steps + 1))
        return loop_nodes


    start_r, start_c = -1, -1
    for r in range(len(grid)):
        for c in range(len(grid[0])):
            if grid[r][c] == 'S':
                start_r, start_c = r, c
                break
        if start_r != -1:
            break

    loop_nodes = find_loop(start_r, start_c)
    
    distances = {}
    for r, c in loop_nodes:
        distances[(r, c)] = 0

    queue = [(start_r, start_c, 0)]
    visited = set()

    while queue:
        r, c, dist = queue.pop(0)
        if (r, c) in visited:
            continue
        visited.add((r, c))
        distances[(r, c)] = dist
        
        for nr, nc in get_neighbors(r, c):
            if (nr, nc) in loop_nodes:
                queue.append((nr, nc, dist + 1))

    max_dist = 0
    for r, c in distances:
        max_dist = max(max_dist, distances[(r, c)])

    print(max_dist)


solve()