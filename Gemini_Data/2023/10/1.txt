from collections import deque

def solve():
    grid = []
    with open("input.txt", "r") as f:
        for line in f:
            grid.append(line.strip())

    rows = len(grid)
    cols = len(grid[0])

    def get_neighbors(r, c):
        neighbors = []
        if r > 0 and grid[r - 1][c] != '.':
            neighbors.append((r - 1, c))
        if r < rows - 1 and grid[r + 1][c] != '.':
            neighbors.append((r + 1, c))
        if c > 0 and grid[r][c - 1] != '.':
            neighbors.append((r, c - 1))
        if c < cols - 1 and grid[r][c + 1] != '.':
            neighbors.append((r, c + 1))
        return neighbors

    def find_loop(start_r, start_c):
        loop = set()
        queue = deque([(start_r, start_c)])
        visited = set()
        visited.add((start_r, start_c))
        
        while queue:
            r, c = queue.popleft()
            loop.add((r, c))
            for nr, nc in get_neighbors(r, c):
                if (nr, nc) not in visited:
                    queue.append((nr, nc))
                    visited.add((nr, nc))

        return loop

    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == 'S':
                start_r, start_c = r, c
                break
        else:
            continue
        break

    loop = find_loop(start_r, start_c)
    
    distances = {}
    for r, c in loop:
        distances[(r, c)] = -1

    distances[(start_r, start_c)] = 0
    queue = deque([(start_r, start_c, 0)])
    
    while queue:
        r, c, dist = queue.popleft()
        
        for nr, nc in get_neighbors(r, c):
            if (nr, nc) in loop and distances[(nr, nc)] == -1:
                distances[(nr, nc)] = dist + 1
                queue.append((nr, nc, dist + 1))
    
    max_dist = max(distances.values())
    print(max_dist)


solve()