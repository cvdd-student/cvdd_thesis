def solve():
    grid = []
    with open("input.txt", "r") as file:  # Replace "input.txt" with actual input file
        for line in file:
            grid.append(line.strip())

    rows = len(grid)
    cols = len(grid[0])

    def find_start():
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 'S':
                    return r, c

    def get_neighbors(r, c):
        neighbors = []
        if r > 0 and grid[r-1][c] != '.':
            neighbors.append((r - 1, c))
        if r < rows - 1 and grid[r+1][c] != '.':
            neighbors.append((r + 1, c))
        if c > 0 and grid[r][c-1] != '.':
            neighbors.append((r, c - 1))
        if c < cols - 1 and grid[r][c+1] != '.':
            neighbors.append((r, c + 1))
        return neighbors

    start_r, start_c = find_start()
    
    visited = set()
    queue = [(start_r, start_c, 0)]
    path = []

    while queue:
        r, c, dist = queue.pop(0)
        if (r, c) in visited:
            continue
        visited.add((r,c))
        path.append((r,c))
        neighbors = get_neighbors(r, c)
        for nr, nc in neighbors:
            queue.append((nr, nc, dist + 1))

    max_dist = 0
    for r,c in path:
      dist_from_start = 0
      visited2 = set()
      queue2 = [(r, c, 0)]
      
      while queue2:
          curr_r, curr_c, curr_dist = queue2.pop(0)
          if (curr_r, curr_c) in visited2:
              continue
          visited2.add((curr_r,curr_c))
          if curr_r == start_r and curr_c == start_c:
              dist_from_start = curr_dist

          
          neighbors2 = get_neighbors(curr_r, curr_c)
          for nr2, nc2 in neighbors2:
              queue2.append((nr2, nc2, curr_dist + 1))
      if dist_from_start > max_dist:
          max_dist = dist_from_start

    
    return max_dist

print(solve())