import collections

def expand_universe(universe):
    rows = len(universe)
    cols = len(universe[0])
    
    galaxy_rows = [i for i, row in enumerate(universe) if '#' in row]
    galaxy_cols = [j for j in range(cols) if any('#' in row[j] for row in universe)]
    
    expanded_universe = [['.' for _ in range(cols * 2)] for _ in range(rows * 2)]
    
    for i in range(rows):
        for j in range(cols):
            if universe[i][j] == '#':
                expanded_universe[i * 2][j * 2] = '#'
            else:
                if i not in galaxy_rows or j not in galaxy_cols:
                    expanded_universe[i * 2][j * 2] = '.'
                else:
                    expanded_universe[i * 2][j * 2] = '.'
                    
    
    for i in range(rows * 2):
        for j in range(cols * 2):
            if expanded_universe[i][j] == '.':
                if j - 1 >= 0 and expanded_universe[i][j-1] == '#':
                    expanded_universe[i][j] = '.'
                if j + 1 < cols * 2 and expanded_universe[i][j+1] == '#':
                    expanded_universe[i][j] = '.'
                if i - 1 >= 0 and expanded_universe[i-1][j] == '#':
                    expanded_universe[i][j] = '.'
                if i + 1 < rows * 2 and expanded_universe[i+1][j] == '#':
                    expanded_universe[i][j] = '.'
    
    return expanded_universe


def shortest_path(universe, start, end):
    rows = len(universe)
    cols = len(universe[0])
    
    queue = collections.deque([(start, 0)])
    visited = {start}
    
    while queue:
        (r, c), dist = queue.popleft()
        if (r, c) == end:
            return dist
        
        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and universe[nr][nc] != '.' and (nr, nc) not in visited:
                queue.append(((nr, nc), dist + 1))
                visited.add((nr, nc))
    return float('inf')


def solve():
    universe = []
    while True:
        try:
            line = input()
            universe.append(line)
        except EOFError:
            break
    
    expanded_universe = expand_universe(universe)
    
    galaxies = []
    galaxy_coords = {}
    galaxy_count = 0
    for r in range(len(expanded_universe)):
        for c in range(len(expanded_universe[0])):
            if expanded_universe[r][c] == '#':
                galaxy_count += 1
                galaxies.append((r, c))
                galaxy_coords[(r,c)] = galaxy_count

    total_distance = 0
    for i in range(len(galaxies)):
        for j in range(i + 1, len(galaxies)):
            dist = shortest_path(expanded_universe, galaxies[i], galaxies[j])
            total_distance += dist

    return total_distance

print(solve())