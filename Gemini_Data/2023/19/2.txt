def process_part(workflows, part, current_workflow="in"):
    workflow = workflows.get(current_workflow)
    if not workflow:
        return None  # Invalid workflow name
    
    for rule in workflow:
        condition, destination = rule.split(":", 1)
        
        if condition == "A":
            return "A"  # Accept
        elif condition == "R":
            return "R"  # Reject
        
        try:
            test = eval(f"part[{condition[0]}]{condition[1:]}")  
            
        except (KeyError, NameError, SyntaxError) as e:
            return None
        
        if test:
           return process_part(workflows, part, destination)


    return "A"  # Default to accept if no rule matches



def calculate_accepted_sum(workflows, parts):
    accepted_sum = 0
    for part in parts:
        result = process_part(workflows, part)
        if result == "A":
            x, m, a, s = part["x"], part["m"], part["a"], part["s"]
            accepted_sum += x + m + a + s

    return accepted_sum


def parse_input(input_str):
    workflows = {}
    parts = []
    lines = input_str.strip().split("\n\n")
    workflow_section = lines[0]
    part_section = lines[1]
  
    
    for line in workflow_section.splitlines():
        name, rules_str = line.split("{", 1)
        rules_str = rules_str[:-1]  # remove closing brace
        rules = [rule.strip() for rule in rules_str.split(",")]
        workflows[name.strip()] = rules


    for line in part_section.splitlines():
        part = {}
        for item in line.split(','):
           key, value = item.split("=")
           part[key] = int(value)

        parts.append(part)



    return workflows, parts


if __name__ == "__main__":
    input_data = """px{a<2006:qkq,m>2090:A,rfg}
pv{a>1716:R,A}
lnx{m>1548:A,A}
rfg{s<537:gd,x>2440:R,A}
qs{s>3448:A,lnx}
qkq{x<1416:A,crn}
crn{x>2662:A,R}
in{s<1351:px,qqz}
qqz{s>2770:qs,m<1801:hdj,R}
gd{a>3333:R,R}
hdj{m>838:A,pv}

{x=787,m=2655,a=1222,s=2876}
{x=1679,m=44,a=2067,s=496}
{x=2036,m=264,a=79,s=2244}
{x=2461,m=1339,a=466,s=291}
{x=2127,m=1623,a=2188,s=1013}"""
    workflows, parts = parse_input(input_data)
    total_accepted_sum = calculate_accepted_sum(workflows, parts)
    print(total_accepted_sum)