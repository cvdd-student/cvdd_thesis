def solve():
    data = """R 6 (#70c710)
D 5 (#0dc571)
L 2 (#5713f0)
D 2 (#d2c081)
R 2 (#59c680)
D 2 (#411b91)
L 5 (#8ceee2)
U 2 (#caa173)
L 1 (#1b58a2)
U 2 (#caa171)
R 2 (#7807d2)
U 3 (#a77fa3)
L 2 (#015232)
U 2 (#7a21e3)"""

    lines = data.strip().split('\n')
    
    def parse_line(line):
      parts = line.split()
      direction = parts[0]
      length = int(parts[1].strip())
      color = parts[2].strip("#")
      return direction, length, color

    
    plan = [parse_line(line) for line in lines]

    x, y = 0, 0
    visited = {(0, 0): True}  # Using a set for efficiency
    min_x, max_x, min_y, max_y = 0, 0, 0, 0

    for direction, length, color in plan:
      for _ in range(length):
          if direction == "U":
            y -= 1
          elif direction == "D":
            y += 1
          elif direction == "L":
            x -= 1
          elif direction == "R":
            x += 1
          visited[(x, y)] = True
          
          #Update Min/Max x, y values
          min_x = min(min_x, x)
          max_x = max(max_x, x)
          min_y = min(min_y, y)
          max_y = max(max_y, y)


    # Adjust coordinates for (0,0)
    min_x, max_x, min_y, max_y = - min(0,min_x) ,max(max_x,0), -min(0,min_y),max(max_y,0)  

    # Now print it all out, correctly sized!

    grid = [['.' for _ in range(max_x + 1)] for _ in range(max_y + 1)]
   
    for (x, y) in visited:

        grid[max_y-y][x] = "#"

    volume = 0

    for row in grid:
      volume += row.count('#')
        

    # Print for visual inspection (optional):
    
    return volume

result = solve()
print(result)