def solve():
    hailstones = []
    with open("input.txt", "r") as f:
        for line in f:
            parts = line.split()
            pos = [int(x) for x in parts[0].split(",")]
            vel = [int(x) for x in parts[2].split(",")[0].split("@")[1].split(",")]
            hailstones.append((pos[0], pos[1], vel[0], vel[1]))

    count = 0
    for i in range(len(hailstones)):
        for j in range(i + 1, len(hailstones)):
            pos1_x, pos1_y, vel1_x, vel1_y = hailstones[i]
            pos2_x, pos2_y, vel2_x, vel2_y = hailstones[j]

            # Calculate the time of intersection
            delta_x = pos1_x - pos2_x
            delta_y = pos1_y - pos2_y
            
            a = vel1_x - vel2_x
            b = vel1_y - vel2_y
            
            if a == 0 and b == 0:
                continue # Parallel lines, no intersection

            t = float(delta_x) / a if a != 0 else float('inf')

            if t < 0:
                continue # Intersection in the past

            y_intersect = pos1_y + t * vel1_y
            x_intersect = pos1_x + t * vel1_x

            if 200000000000000 <= x_intersect <= 400000000000000 and 200000000000000 <= y_intersect <= 400000000000000:
                count += 1
    return count

print(solve())