def solve():
    connections = {}
    with open("input.txt", "r") as file:
        for line in file:
            parts = line.strip().split(":")
            component = parts[0].strip()
            connected_components = [c.strip() for c in parts[1].split()]
            connections[component] = set(connected_components)
            
    def find_connected_components(connections, removed_connections):
        
        visited = set()
        connected_groups = []

        def dfs(component, group):
            if component in visited:
                return
            
            visited.add(component)
            group.add(component)
            
            for connection in connections.get(component, set()):
                if (component, connection) not in removed_connections and (connection, component) not in removed_connections:
                    dfs(connection, group)

        
        for component in connections:
            if component not in visited:
                group = set()
                dfs(component, group)
                connected_groups.append(group)

        return connected_groups
  
    def calculate_group_sizes_product(groups):
        if len(groups) == 2:
            return len(groups[0]) * len(groups[1])
        return 0


    
    import itertools
  
    max_product = 0
    
    for combination in itertools.combinations(connections.keys(), 3):
            removed_connections = set()
            for i in combination:
                for conn in connections.get(i, []):
                     removed_connections.add((i, conn))
                     
            connected_groups = find_connected_components(connections, removed_connections)
           
            
            if len(connected_groups) == 2:

                 
                 product = calculate_group_sizes_product(connected_groups)

                 max_product = max(max_product, product)

    
    print(max_product)

solve()