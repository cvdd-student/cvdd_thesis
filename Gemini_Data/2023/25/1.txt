def solve():
    wiring_diagram = {}
    with open("input.txt", "r") as f:
        for line in f:
            parts = line.strip().split(":")
            component = parts[0].strip()
            connections = [conn.strip() for conn in parts[1].split()]
            wiring_diagram[component] = set(connections)

    def find_connected_components(components, disconnected_edges):
        visited = set()
        groups = []

        def dfs(component):
            visited.add(component)
            group.add(component)
            for neighbor in components.get(component, set()):
                if (component, neighbor) not in disconnected_edges and (neighbor, component) not in disconnected_edges and neighbor not in visited:
                    dfs(neighbor)

        for component in components:
            if component not in visited:
                group = set()
                dfs(component)
                groups.append(group)

        return groups

    components = set()
    for component, connections in wiring_diagram.items():
        components.add(component)
        components.update(connections)
    
    def calculate_product(groups):
        if len(groups) != 2:
            return 0
        return len(groups[0]) * len(groups[1])
    
    
    
    best_product = 0
    for edge1 in [(a,b) for a in components for b in wiring_diagram.get(a,[])]:
        for edge2 in [(a,b) for a in components for b in wiring_diagram.get(a,[]) if a!=edge1[0] and b!=edge1[1]]:
            for edge3 in [(a,b) for a in components for b in wiring_diagram.get(a,[]) if a!=edge1[0] and a!=edge2[0] and a!=edge2[1] and b!=edge1[1] and b!=edge2[1] and b!=edge2[0]]:
                disconnected_edges = {edge1, edge2, edge3}
                disconnected_edges = {
                    (a, b) for (a, b) in disconnected_edges
                }.union({(b, a) for (a, b) in disconnected_edges})
                groups = find_connected_components(wiring_diagram, disconnected_edges)
                product = calculate_product(groups)
                if product > best_product :
                    best_product = product
    
    return best_product
    
print(solve())