def solve():
    lines = []
    while True:
        try:
            line = input()
            lines.append(line)
        except EOFError:
            break

    total_arrangements = 0
    for i in range(len(lines)):
        line = lines[i]
        parts = line.split()
        springs = parts[0]
        groups = [int(x) for x in parts[1].split(',')]
        
        def count_arrangements(springs, groups):
            
            n = len(springs)
            
            def is_valid(arrangement):
                current_group_size = 0
                valid_groups = []
                for j in range(n):
                    if arrangement[j] == '#':
                        current_group_size += 1
                    else:
                        if current_group_size > 0:
                            valid_groups.append(current_group_size)
                        current_group_size = 0
                if current_group_size > 0:
                    valid_groups.append(current_group_size)
                
                if valid_groups == groups:
                    return True
                else:
                    return False

            
            def backtrack(index, current_arrangement):
                if index == n:
                    if is_valid(current_arrangement):
                        return 1
                    else:
                        return 0
                
                if springs[index] != '?':
                    return backtrack(index + 1, current_arrangement + [springs[index]])
                else:
                    count = backtrack(index + 1, current_arrangement + ['#']) + backtrack(index + 1, current_arrangement + ['.'])
                    return count

            return backtrack(0, [])

        total_arrangements += count_arrangements(springs, groups)


    print(total_arrangements)

solve()