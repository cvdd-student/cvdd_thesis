def solve():
    lines = []
    while True:
        try:
            line = input()
            lines.append(line)
        except EOFError:
            break

    total_arrangements = 0
    for i in range(len(lines)):
        row_data = lines[i].split()
        springs = row_data[0]
        groups = list(map(int, row_data[1].split(',')))

        arrangements = 0
        
        def backtrack(index, current_arrangement):
            nonlocal arrangements
            if index == len(springs):
                valid = True
                current_groups = []
                current_group_size = 0
                for j in range(len(current_arrangement)):
                    if current_arrangement[j] == '#':
                        current_group_size += 1
                    else:
                        if current_group_size > 0:
                            current_groups.append(current_group_size)
                            current_group_size = 0
                if current_group_size > 0:
                    current_groups.append(current_group_size)
                if current_groups == groups:
                    arrangements += 1
                return
            
            if springs[index] == '?':
                backtrack(index + 1, current_arrangement + ['#'])
                backtrack(index + 1, current_arrangement + ['.'])
            else:
                backtrack(index + 1, current_arrangement + [springs[index]])

        backtrack(0, [])
        total_arrangements += arrangements
    
    print(total_arrangements)

solve()