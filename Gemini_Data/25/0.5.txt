def parse_schematic(schematic):
    lines = schematic.splitlines()
    lock_height = []
    key_height = []
    for line in lines:
        if line:
            if len(lock_height) == 0:
                for i in range(len(line)):
                    if line[i] == '#':
                        lock_height.append(0)
                    else:
                        lock_height.append(0)
            else:
                lock_height[len(lock_height)-1] = lock_height[len(lock_height)-1] + 1 if line[len(lock_height)-1] == '#' else lock_height[len(lock_height)-1]
    for line in lines:
        if line:
            if len(key_height) == 0:
                for i in range(len(line)):
                    if line[i] == '#':
                        key_height.append(0)
                    else:
                        key_height.append(0)
            else:
                key_height[len(key_height)-1] = key_height[len(key_height)-1] + 1 if line[len(key_height)-1] == '#' else key_height[len(key_height)-1]
    return lock_height, key_height
    

def solve():
    locks = []
    keys = []
    
    schematics = []
    schematics.append("#####\n.####\n.####\n.####\n.#.#.\n.#...\n.....")
    schematics.append("#####\n##.##\n.#.##\n...##\n...#.\n...#.\n.....")
    schematics.append(".....\n#....\n#....\n#...#\n#.#.#\n#.###\n#####")
    schematics.append(".....\n.....\n#.#..\n###..\n###.#\n###.#\n#####")
    schematics.append(".....\n.....\n.....\n#....\n#.#..\n#.#.#\n#####")
    
    for schematic in schematics:
      lock_height, key_height = parse_schematic(schematic)
      locks.append(lock_height)
      keys.append(key_height)
    
    count = 0
    for i in range(len(locks)):
        for j in range(len(keys)):
            fit = True
            for k in range(len(locks[i])):
                if locks[i][k] + keys[j][k] > 5:
                    fit = False
                    break
            if fit:
                count += 1
    return count


if __name__ == "__main__":
    result = solve()
    print(result)