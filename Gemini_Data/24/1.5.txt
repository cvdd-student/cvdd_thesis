def solve():
    lines = """x00: 1
x01: 0
x02: 1
x03: 1
x04: 0
y00: 1
y01: 1
y02: 1
y03: 1
y04: 1

ntg XOR fgs -> mjb
y02 OR x01 -> tnw
kwq OR kpj -> z05
x00 OR x03 -> fst
tgd XOR rvg -> z01
vdt OR tnw -> bfw
bfw AND frj -> z10
ffh OR nrd -> bqk
y00 AND y03 -> djm
y03 OR y00 -> psh
bqk OR frj -> z08
tnw OR fst -> frj
gnj AND tgd -> z11
bfw XOR mjb -> z00
x03 OR x00 -> vdt
gnj AND wpb -> z02
x04 AND y00 -> kjc
djm OR pbm -> qhw
nrd AND vdt -> hwm
kjc AND fst -> rvg
y04 OR y02 -> fgs
y01 AND x02 -> pbm
ntg OR kjc -> kwq
psh XOR fgs -> tgd
qhw XOR tgd -> z09
pbm OR djm -> kpj
x03 XOR y03 -> ffh
x00 XOR y04 -> ntg
bfw OR bqk -> z06
nrd XOR fgs -> wpb
frj XOR qhw -> z04
bqk OR frj -> z07
y03 OR x01 -> nrd
hwm AND bqk -> z03
tgd XOR rvg -> z12
tnw OR pbm -> gnj"""

    wires = {}
    gates = []
    
    # Parse input
    for line in lines.strip().split('\n'):
        parts = line.split("->")
        if len(parts) == 2:
            output = parts[1].strip()
            input_str = parts[0].strip()
            
            gates.append((input_str, output))

    # Extract initial values
    for line in lines.strip().split('\n'):
      parts = line.split(':')
      if len(parts) == 2:
        key = parts[0].strip()
        value = int(parts[1].strip())
        wires[key] = value

    # Function to evaluate boolean expressions
    def evaluate(expression, wires):
        if expression.isdigit():
            return int(expression)
        elif expression in wires:
            return wires[expression]

        input_parts = expression.split()

        op1 = input_parts[0]
        op2 = input_parts[2]

        val1 = evaluate(op1, wires) if op1 in wires or op1.isdigit() else evaluate(op1, wires)
        val2 = evaluate(op2, wires) if op2 in wires or op2.isdigit() else evaluate(op2, wires)

        op = input_parts[1]

        if op == 'AND':
            return int(val1 and val2)
        elif op == 'OR':
            return int(val1 or val2)
        elif op == 'XOR':
            return int(val1 != val2)

    # Main simulation loop
    while gates:
        expression, output = gates.pop(0)
        val = evaluate(expression, wires)
        wires[output] = val

    # Extract and convert z-values
    output_bits = []
    for i in range(100):
        bit_name = f"z{i}"
        if bit_name in wires:
            output_bits.append(wires[bit_name])

    # Convert binary to decimal
    decimal_output = int("".join(str(bit) for bit in output_bits), 2)
    return decimal_output

print(solve())